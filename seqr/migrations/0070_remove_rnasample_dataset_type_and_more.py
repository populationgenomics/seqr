# Generated by Django 4.2.13 on 2024-07-12 20:14

from django.db import migrations, models
from django.db.models import Value
from django.db.models.functions import Concat, Left, Replace


def _update_sample_data_type(queryset, data_type):
    return queryset.update(
        guid=Left(Concat(Value('R'), Replace('guid', Value('_'), Value(f'_{data_type}_'))), 30),
        data_type=Value(data_type),
    )


def _create_data_type_samples(rna_samples, rna_data, data_type, sample_ids):
    new_samples = []
    guid_old_id_map = {}
    for sample in rna_samples.filter(id__in=sample_ids):
        sample.guid = sample.guid.replace(f'_{sample.data_type}_', f'_{data_type}_', 1)[:30]
        guid_old_id_map[sample.guid] = sample.id
        sample.data_type = data_type
        # clearing primary key causes django to create a new model
        sample.pk = None
        sample.id = None
        new_samples.append(sample)

    if not new_samples:
        return

    new_models = rna_samples.bulk_create(new_samples)
    print(f'Created {len(new_models)} {data_type} Samples')

    id_map = {guid_old_id_map[new_model.guid]: new_model.id for new_model in new_models}
    for old_sample_id, new_sample_id in id_map.items():
        count = rna_data.filter(sample_id=old_sample_id).update(sample_id=new_sample_id)
        print(f'Updated foreign key reference for {count} {data_type} data')


def add_data_type_rna_samples(apps, schema_editor):
    RnaSample = apps.get_model('seqr', 'RnaSample')
    RnaSeqSpliceOutlier = apps.get_model('seqr', 'RnaSeqSpliceOutlier')
    RnaSeqTpm = apps.get_model('seqr', 'RnaSeqTpm')
    RnaSeqOutlier = apps.get_model('seqr', 'RnaSeqOutlier')
    db_alias = schema_editor.connection.alias
    rna_samples = RnaSample.objects.using(db_alias)

    splice_outlier_samples = set(RnaSeqSpliceOutlier.objects.using(db_alias).values_list('sample_id', flat=True).distinct())
    tpm_outlier_samples = set(RnaSeqTpm.objects.using(db_alias).values_list('sample_id', flat=True).distinct())
    expression_outlier_samples = set(RnaSeqOutlier.objects.using(db_alias).values_list('sample_id', flat=True).distinct())

    # Update data type for inactive samples
    data_samples = splice_outlier_samples | tpm_outlier_samples | expression_outlier_samples
    no_data_samples = rna_samples.exclude(id__in=data_samples)
    if no_data_samples:
        for data_type, substring in [('S', 'fraser'), ('T', 'tpm'), ('E', 'outrider')]:
            count = _update_sample_data_type(no_data_samples.filter(data_source__icontains=substring), data_type)
            print(f'Inferred data type for {count} inactive {substring} samples')

    # Update primary data type
    num_splice = _update_sample_data_type(rna_samples.filter(id__in=splice_outlier_samples), 'S')
    num_tpm = _update_sample_data_type(rna_samples.filter(id__in=tpm_outlier_samples-splice_outlier_samples), 'T')
    num_expr = _update_sample_data_type(
        rna_samples.filter(id__in=expression_outlier_samples-tpm_outlier_samples-splice_outlier_samples), 'E')
    if num_splice or num_tpm or num_expr:
        print(f'Updated primary data type for {num_splice} splice, {num_expr} expression, and {num_tpm} tpm samples')

    # Add sample models for samples with multiple data types
    _create_data_type_samples(
        rna_samples, RnaSeqTpm.objects.using(db_alias), 'T', sample_ids=splice_outlier_samples & tpm_outlier_samples,
    )
    _create_data_type_samples(
        rna_samples,  RnaSeqOutlier.objects.using(db_alias), 'E',
        sample_ids=expression_outlier_samples & (splice_outlier_samples | tpm_outlier_samples),
    )


class Migration(migrations.Migration):

    dependencies = [
        ('seqr', '0069_remove_sample_dataset_type_and_more'),
    ]

    operations = [
        migrations.RenameModel('Sample', 'RnaSample'),
        migrations.RenameModel('NonRnaSample', 'Sample'),
        migrations.RemoveField(
            model_name='rnasample',
            name='dataset_type',
        ),
        migrations.RemoveField(
            model_name='rnasample',
            name='elasticsearch_index',
        ),
        migrations.RemoveField(
            model_name='rnasample',
            name='loaded_date',
        ),
        migrations.RemoveField(
            model_name='rnasample',
            name='sample_id',
        ),
        migrations.RemoveField(
            model_name='rnasample',
            name='sample_type',
        ),
        migrations.AddField(
            model_name='rnasample',
            name='data_type',
            field=models.CharField(choices=[('T', 'TPM'), ('E', 'Expression Outlier'), ('S', 'Splice Outlier')], default='X', max_length=1),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='rnasample',
            name='data_source',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='rnasample',
            name='tissue_type',
            field=models.CharField(choices=[('WB', 'whole_blood'), ('F', 'fibroblasts'), ('M', 'muscle'), ('L', 'lymphocytes'), ('A', 'airway_cultured_epithelium')], max_length=2),
        ),
        migrations.RunPython(add_data_type_rna_samples, reverse_code=migrations.RunPython.noop),
    ]
